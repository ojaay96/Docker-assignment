name: Hello World Workflow

on: 
  push:
    branches: 
      - main
      - 'exploring-*'

jobs:
    unit-testing:
        name: Unit Testing
        runs-on: [self-hosted, label-1]
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Setup NodeJS Version 
            uses: actions/setup-node@v3
            with:
              node-version: '20'

          - name: Cache NPM dependencies
            uses: actions/cache@v3
            with:
              path: ~/.npm 
              key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
              restore-keys: |
                        ${{ runner.os }}-node-

          - name: Install Dependencies
            run: npm install

    docker:
        name: Containerization
        needs: unit-testing
        permissions:
            packages: write
            contents: read
        runs-on: [self-hosted, label-1]

        steps:
          - name: Check Repo
            uses: actions/checkout@v4

          - name: Log in to Dockerhub 
            uses: docker/login-action@v3
            with:
                username: ${{ vars.DOCKERHUB_USERNAME  }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

          - name: GHCR Login
            uses: docker/login-action@v2.2.0
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}
          
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3      #added to prevent self-hosted runner error

          - name: Build Docker for Testing (Locally)
            uses: docker/build-push-action@v6
            with:
                context: .
                push: false  # set to true to push
                load: true   # Load image into local Docker daemon
                tags: ${{ vars.DOCKERHUB_USERNAME }}/hello-world:${{ github.sha }}
                
          - name: Docker Image Testing
            run: |
                docker rm -f hello-world || true
                docker run --name hello-world -d \
                    -p 3000:3000 \
                    ${{ vars.DOCKERHUB_USERNAME }}/hello-world:${{ github.sha }}

                echo "Waiting for the container to boot..."
                sleep 15

                echo "Testing endpoint response:"            
                curl -s http://127.0.0.1:3000 | grep -i "what is your name"

          - name: Push Image to Registries
            uses: docker/build-push-action@v6
            with:
              context: .
              push: true
              tags: |
                  ${{ vars.DOCKERHUB_USERNAME }}/hello-world:${{ github.sha }}
                  ghcr.io/${{ github.repository_owner }}/hello-world:${{ github.sha }}  
          
    deploy:
      name: Deploy to AKS
      needs: docker
      permissions:
          id-token: write
          contents: read

      env:
          IMAGE_NAME: hello-world
          ACR_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/hello-world:${{ github.sha }}

      runs-on: [self-hosted, label-1]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Azure Login
          uses: azure/login@v2
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Set AKS context
          uses: azure/aks-set-context@v3
          with:
            # creds:${{ secrets.AZURE_CREDENTIALS }}
            cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
            resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

        - name: Debug ENV
          run: |
            echo "IMAGE_NAME: $IMAGE_NAME"
            echo "ACR_IMAGE: $ACR_IMAGE"

        - name: Deploy to AKS
          run: |
            kubectl create deployment ${{ env.IMAGE_NAME }} \
              --image=${{ env.ACR_IMAGE }} --dry-run=client -o yaml | kubectl apply --validate=false -f -
            kubectl expose deployment ${{ env.IMAGE_NAME }} \
              --type=LoadBalancer --port=80 --target-port=3000 --name=hello-world-svc --dry-run=client -o yaml | kubectl apply --validate=false -f -
            kubectl set image deployment/${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}=${{ env.ACR_IMAGE }} --record
            kubectl rollout status deployment/${{ env.IMAGE_NAME }}

        - name: Show service info
          run: kubectl get svc --selector=app=${{ env.IMAGE_NAME }} -o wide
          

